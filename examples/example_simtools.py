# Imports all modules needed for this example
from context import timeseries
from context import turbine
from context import battery
from context import communication
from context import controller
from context import sensor
from context import station
from context import core

# Imports other required modules for this example
import pandas as pd
import os
import matplotlib.pyplot as plt

try: 
	# Reads the pickle dataframe generated by the example_usgs.py script
	flow_df = pd.read_pickle(os.path.join('./','data_files/ILState03612600.pkl'))
except:
	print("=== Error: File  \"data_files/ILState03612600.pkl \" could not be found!                ===" )
	print("=== Make sure to first run the script  \"example_usgs.py \"  to download required file. ===" )
	exit()
	
# Creates an one-minute linearly interpolated time series
resampled_flow_df = timeseries.resampledf(flow_df, interp_method='linear', verbose=True)

# Creates power time series based on first version of water lily turbine model 
power_df = turbine.waterlilyv1(resampled_flow_df, verbose=False)

# Creates a battery model object with capacity of 1.2 kWh and 0.6 kWh initial charge
batt = battery.model(1.2, 0.6, verbose=True)

# Creates a set of water quality sensors object models with sampling interval of 2 minutes
wq_sensors = sensor.global_wq_sensors(verbose = True, WQ101=2, WQ201=2, WQ301=2, WQ401=2, WQ600=2, WQ730=2)

# Creates a controller model with active power consumption of 0.5 Watts, initial state active and always on (t idle = 0)
station_controller = controller.model(0.5, 0, initial_state = 'active', verbose=True)

# Creates a communication's module model with active power consumption of 5 watts and idle period of 59 minutes
station_communication = communication.model(17, 1, verbose=True)

# # Creates a sensor station operating in 'fixed' mode with all previously created load objects
# sensor_station = station.model(controller, communication, wq_sensors, verbose = True)

# Creates a sensor station operating in 'fixed_battsense' mode with all previously created load objects
sensor_station = station.model(station_controller, station_communication, wq_sensors, operation_mode = 'fixed_battsense', verbose = True)

# # Creates a sensor station operating in 'stoplight2' mode with all previously created load objects
# sensor_station = station.model(controller, communication, wq_sensors, operation_mode = 'stoplight2', verbose = True, energy_threshold = 0.8, duty_cycle_factor = 2)

# # Creates a sensor station operating in 'stoplight2_battsense' mode with all previously created load objects
# sensor_station = station.model(controller, communication, wq_sensors, operation_mode = 'stoplight2_battsense', verbose = True, energy_threshold = 0.8, duty_cycle_factor = 2)

# Runs discrete-time simulation
simulation_output = core.runsim(power_df, sensor_station, batt, verbose = True)

# Prints load energy consumption
print(simulation_output['load energy'])

# Plots stored energy in the battery 
simulation_output['stored energy'].plot()
plt.title("Energy Stored in the Battery")
plt.xlabel("Timestamp")
plt.ylabel("Energy in kWh")
plt.legend(loc='lower right')
plt.ylim(0,1.25)
plt.show()
