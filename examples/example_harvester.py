# Imports timeseries and harvester modules from environment package
from context import timeseries
from context import turbine

# Imports other required modules for this example
import pandas as pd
import os
import matplotlib.pyplot as plt

try: 
	# Reads the pickle dataframe generated by the example_usgs.py script
	flow_df = pd.read_pickle(os.path.join('./','data_files/ILState03612600_UTC.pkl'))
except:
	print("=== Error: File  \"data_files/ILState03612600_UTC.pkl \" could not be found!                ===" )
	print("=== Make sure to first run the script  \"example_usgs.py \"  to download required file. ===" )
	exit()

# Creates an one-minute linearly interpolated time series
resampled_flow_df = timeseries.resampledf(flow_df, interp_method='linear', verbose=True)

# Creates power time series based on harvester model 
# (min_flow = 0.1, max_flow = 4, radius = 0.1, efficiency = 0.17)
power_df1 = turbine.generictf(resampled_flow_df, 0.1, 4, 0.1, 0.17, verbose=True, enable_plot=True) 

# Plots power data for generic turbine
power_df1.plot()
plt.title("Power Generation for Generic Turbine Model")
plt.xlabel("Timestamp")
plt.ylabel("Generated power in Watts")
plt.legend(loc='upper right')
plt.show()

# Creates power time series based on first version of water lily turbine model 
power_df2 = turbine.waterlilyv1(resampled_flow_df, verbose=True, enable_plot=True)

# Plots power data for first version of water lily turbine model 
power_df2.plot()
plt.title("Power Generation for WaterLily Turbine Model (V1)")
plt.xlabel("Timestamp")
plt.ylabel("Generated power in Watts")
plt.legend(loc='upper right')
plt.show()

# Creates power time series based on second version of water lily turbine model 
power_df3 = turbine.waterlilyv2(resampled_flow_df, verbose=True, enable_plot=True)

# Plots power data for second version of water lily turbine model 
power_df3.plot()
plt.title("Power Generation for WaterLily Turbine Model (V2)")
plt.xlabel("Timestamp")
plt.ylabel("Generated power in Watts")
plt.legend(loc='upper right')
plt.show()

